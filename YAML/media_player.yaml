substitutions:
  name: esp32-voice-assistant-01
  friendly_name: ESP32-Voice-Assistant-01
  device_description: "ESP32 Voice Assistant Media Speaker"
  
  api_key: "ReplaceMe"
  ap_password: "ReplaceMe"
  ota_password: "ReplaceMe"


####################################################################
#### change the micro wake word to be used on the line below   #####
####      options are okay_nabu, hey_jarvis, alexa             #####
####################################################################
  micro_wake_word_model: alexa
####################################################################

  # Phases of the Voice Assistant
  # IDLE: The voice assistant is ready to be triggered by a wake-word
  voice_assist_idle_phase_id: '1'
  # LISTENING: The voice assistant is ready to listen to a voice command (after being triggered by the wake word)
  voice_assist_listening_phase_id: '2'
  # THINKING: The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '3'
  # REPLYING: The voice assistant is replying to the command
  voice_assist_replying_phase_id: '4'
  # NOT_READY: The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  # ERROR: The voice assistant encountered an error
  voice_assist_error_phase_id: '11'
  # MUTED: The voice assistant is muted and will not reply to a wake-word
  voice_assist_muted_phase_id: '12'

  #pins
  # I2S Audio SPK
  i2s_lrclk_pin_out: GPIO46
  i2s_bclk_pin_out: GPIO9
  i2s_dout_pin_spk: GPIO8

  # I2S AUdio MIC
  i2s_lrclk_pin_in: GPIO6
  i2s_bclk_pin_in: GPIO7
  i2s_din_pin_mic: GPIO4

  #Led's  
  led_pin: GPIO48 # on-board LED
  led_bar_pin: GPIO16 # Light Bar LED

  min_brightness: 11%
  max_brightness: 21%

  psramMode: octal #2MB PSRAM = quad mode, 8MB or 16MB = octal

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  min_version: 2025.2.0
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
      priority: 600
      then:
        - media_player.volume_set: !lambda return id(media_volume).state / 100;
        # Run the script to refresh the LED status
        - script.execute: control_led
        # - output.turn_off: set_low_speaker
        # If after 30 seconds, the device is still initializing (It did not yet connect to Home Assistant), turn off the init_in_progress variable and run the script to refresh the LED status
        - delay: 30s
        - if:
            condition:
              lambda: return id(init_in_progress);
            then:
              - lambda: id(init_in_progress) = false;
              - script.execute: control_led

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  variant: esp32s3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"
      CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: "16"
      CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: "512"

      CONFIG_TCP_SND_BUF_DEFAULT: "65535"
      CONFIG_TCP_WND_DEFAULT: "512000"
      CONFIG_TCP_RECVMBOX_SIZE: "512"

      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: ${psramMode}
  speed: 80MHz

api:
  encryption:
    key: ${api_key}
  on_client_connected:
    - lambda: |-
        id(api_connection) = true;
    - script.execute: control_led
  on_client_disconnected:
    - lambda: |-
        id(api_connection) = false;
    - script.execute: control_led

ota:
  - platform: esphome
    password: ${ota_password}

logger:
  level: DEBUG


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none

  ap:
    ssid: ${name}
    password: ${ap_password}
  on_connect:
    - lambda: |-
        id(wifi_connection) = true;
    - script.execute: control_led
  on_disconnect:
    - lambda: |-
        id(wifi_connection) = false;
    - script.execute: control_led

captive_portal:

improv_serial: 

time:
  - platform: homeassistant
    id: ha_time

interval:
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(api_connection) != true) };'
          then:
            - if:
                condition:
                  api.connected:
                then:
                  - lambda: "id(api_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    api.connected:
                then:
                  - lambda: "id(api_connection) = false;"
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(wifi_connection) != true) };'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = false;"

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: In Home Assistant
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "Home Assistant";'
            - script.execute: control_led
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "On Device";'
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start
            - script.execute: control_led
script:
  - id: show_volume
    mode: restart
    then:
      - light.turn_on:
          id: middle_led
          effect: show_volume
      - delay: 1s
      - script.execute: control_led

  - id: control_led
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(control_led_voice_assist_listening_phase).execute();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(control_led_voice_assist_thinking_phase).execute();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(control_led_voice_assist_replying_phase).execute();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(control_led_voice_assist_error_phase).execute();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(control_led_voice_assist_muted_phase).execute();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(control_led_voice_assist_not_ready_phase).execute();
                                break;
                              default:
                                id(control_led_voice_assist_idle_phase).execute();
                                break;
                            }
                      else:
                        - script.execute: control_led_no_ha_connection_state
                else:
                  - script.execute: control_led_no_ha_connection_state
          else:
            - script.execute: control_led_init_state


  # Script executed during initialisation: In this example: Turn the LED in green with a fast pulse ðŸŸ¢
  - id: control_led_init_state
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 0%
          green: 100%
          brightness: ${max_brightness}
          effect: "Fast Pulse"


  # Script executed when the device has no connection to Home Assistant: In this example: Turn off the LED
  - id: control_led_no_ha_connection_state
    then:
      - light.turn_off:
          id: middle_led

  # Script executed when the voice assistant is idle (waiting for a wake word): In this example: Turn off the LED
  - id: control_led_voice_assist_idle_phase
    then:
      - light.turn_off:
          id: middle_led


  # Script executed when the voice assistant is listening to a command: In this example: Turn the LED in blue with a slow pulse ðŸ”µ
  - id: control_led_voice_assist_listening_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: ${max_brightness}
          effect: "Slow Pulse"


  # Script executed when the voice assistant is processing the command: In this example: Turn the LED in blue with a fast pulse ðŸ”µ
  - id: control_led_voice_assist_thinking_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: ${max_brightness}
          effect: "Fast Pulse"


  # Script executed when the voice assistant is replying to a command: In this example: Turn the LED in blue, solid (no pulse) ðŸ”µ
  - id: control_led_voice_assist_replying_phase
    then:
      - light.turn_on:
          # id: led
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: ${max_brightness}
          effect: "none"


  # Script executed when the voice assistant encounters an error: In this example: Turn the LED in red, solid (slow pulse) ðŸ”´
  - id: control_led_voice_assist_error_phase
    then:
      - light.turn_on:
          # id: led
          id: middle_led
          blue: 0%
          red: 100%
          green: 0%
          brightness: ${max_brightness}
          effect: "Slow Pulse"


  # Script executed when the voice assistant is muted: In this example: Turn the LED in red, solid (no pulse) ðŸ”´
  - id: control_led_voice_assist_muted_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 0%
          brightness: ${max_brightness}
          effect: "none"


  # Script executed when the voice assistant is not ready: In this example: Turn the LED in yellow, solid (slow pulse) ðŸŸ¡
  - id: control_led_voice_assist_not_ready_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 100%
          brightness: ${max_brightness}
          effect: "Slow Pulse"

globals:
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

  - id: api_connection
    type: bool
    restore_value: no
    initial_value: "false"

  - id: mute_value
    type: bool
    restore_value: no
    initial_value: "false"

  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}

  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'

button:
  - platform: restart
    id: reboot
    name: "Reboot"

switch:
  - platform: template
    name: Mute
    id: mute_switch
    optimistic: True
    on_turn_on:
      - voice_assistant.stop:
      - micro_wake_word.stop:
      - delay: 50ms
      - lambda: id(va).set_use_wake_word(false);
      - lambda: |-
          id(mute_value) = true;
      - media_player.volume_set: 0%
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: control_led
    on_turn_off:
      - media_player.volume_set: 50%      
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: control_led
      - lambda: |-
          id(mute_value) = false;
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - delay: 50ms
            - voice_assistant.start_continuous:
          else:
            - delay: 50ms
            - micro_wake_word.start
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: Enable Voice Assistant
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:assistant
    # When the switch is turned on (on Home Assistant):
    # Start the voice assistant component
    # Set the correct phase and run the script to refresh the LED status
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - micro_wake_word.start
            - script.execute: control_led
    # When the switch is turned off (on Home Assistant):
    # Stop the voice assistant component
    # Set the correct phase and run the script to refresh the LED status
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - voice_assistant.stop
            - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: control_led

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: ws2812
    pin: ${led_bar_pin}
    num_leds: 8
    name: "Status LED Bar"
    id: led_bar
    icon: mdi:led-on
    default_transition_length: 0s
  - platform: partition
    id: start_led
    segments:
      - id: led_bar
        from: 0
        to: 0
    default_transition_length: 100ms
  - platform: partition
    id: middle_led
    segments:
      - id: led_bar
        from: 1
        to: 6
        reversed: true #set false if you want to chage direction of the led bar on change volume
    default_transition_length: 100ms
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: ${min_brightness}
          max_brightness: ${max_brightness}
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: ${min_brightness}
          max_brightness: ${max_brightness}
      - addressable_lambda:
          name: show_volume
          update_interval: 50ms
          lambda: |-
            int int_volume = int(id(media_volume).state * it.size());
            int full_leds = int_volume / 100;
            int last_brightness = int_volume % 100;
            int i = 0;
            for(; i < full_leds; i++) {
              it[i] = Color(255, 255, 255);
            }
            if(i < 4) {
              it[i++] = Color(64, 64, 64).fade_to_white(last_brightness*256/100);
            }
            for(; i < it.size(); i++) {
              it[i] = Color(64, 64, 64);
            }
  - platform: partition
    id: end_led
    segments:
      - id: led_bar
        from: 7
        to: 7
    default_transition_length: 100ms
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: ${min_brightness}
          max_brightness: ${max_brightness}
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: ${min_brightness}
          max_brightness: ${max_brightness}

sensor:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address for ${name}
      id: ip_addr

  - platform: template
    id: wakeword_location

i2s_audio:
  - id: i2s_audio_in
    i2s_lrclk_pin: $i2s_lrclk_pin_in
    i2s_bclk_pin: $i2s_bclk_pin_in

  - id: i2s_audio_out
    i2s_lrclk_pin: $i2s_lrclk_pin_out
    i2s_bclk_pin: $i2s_bclk_pin_out

microphone:
  - platform: i2s_audio
    id: i2s_mic
    adc_type: external
    channel: left
    sample_rate: 16000    
    bits_per_sample: 32bit
    i2s_audio_id: i2s_audio_in
    i2s_din_pin: $i2s_din_pin_mic
    pdm: false

speaker:
  - platform: i2s_audio
    id: i2s_spk
    i2s_audio_id: i2s_audio_out
    i2s_dout_pin: $i2s_dout_pin_spk
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 32bit
    channel: mono
    timeout: never
    
  - platform: mixer
    id: mixing_speaker    
    num_channels: 1
    output_speaker: i2s_spk
    source_speakers:
      - id: announcement_mixing_input        
      - id: media_mixing_input        
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: i2s_media
    name: "${name} Media Player"
    internal: false
    volume_increment: 0.1
    volume_min: 60%
    volume_max: 100%
    task_stack_in_psram: true
    announcement_pipeline:
      speaker: announcement_resampling_speaker      
      num_channels: 1
    media_pipeline:
      speaker: media_resampling_speaker      
      num_channels: 1
    on_idle:    
      - number.set:
          id: media_volume
          value: !lambda return id(i2s_media).volume * 100;
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
    on_state:
      then:
        - lambda: |-
            static float old_volume = -1;
            float new_volume = id(media_volume).state;
            if(abs(new_volume-old_volume) > 0.01) {
              if(old_volume != -1) {
                id(show_volume)->execute();
              }
            }
            old_volume = new_volume;

micro_wake_word:
  vad:
  models:
    - model: ${micro_wake_word_model}
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: i2s_mic
  media_player: i2s_media
  use_wake_word: true
  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 4.0
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.start
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
    - script.execute: control_led
  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - micro_wake_word.stop
    - script.execute: control_led
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - script.execute: control_led
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_led
  on_tts_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_led
  on_end:
    - if:
        condition:
          - switch.is_on: use_wake_word
        then:
          - wait_until:
              not:
                voice_assistant.is_running:
          - micro_wake_word.start
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_led
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: control_led
          - delay: 1s
          - if:
              condition:
                switch.is_on: use_wake_word
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: control_led

number:
  - platform: template
    id: media_volume
    internal: True
    name: "${name} Media Volume"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 100
    optimistic: true
    restore_value: true
    device_class: volume

################## config end ##################

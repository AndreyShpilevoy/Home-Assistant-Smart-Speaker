substitutions:
  name: esp32-voice-assistant-01
  friendly_name: ESP32-Voice-Assistant-01
  device_description: "ESP32 Voice Assistant Media Speaker"
  
  api_key: "ReplaceMe"
  ap_password: "ReplaceMe"
  ota_password: "ReplaceMe"
  
  #pins
  # I2S Audio SPK
  i2s_lrclk_pin_out: GPIO46
  i2s_bclk_pin_out: GPIO9
  i2s_dout_pin_spk: GPIO8

  # I2S AUdio MIC
  i2s_lrclk_pin_in: GPIO6
  i2s_bclk_pin_in: GPIO7
  i2s_din_pin_mic: GPIO4

  #Led's  
  led_pin: GPIO48 # on-board LED
  led_bar_pin: GPIO16 # Light Bar LED

  min_brightness_night: '0.11'
  max_brightness_night: '0.21'
  min_brightness_day: '0.60'
  max_brightness_day: '0.80'

  min_brightness_night_percent: 11%
  max_brightness_night_percent: 21%
  min_brightness_day_percent: 60%
  max_brightness_day_percent: 80%

  timezone: "Europe/Amsterdam"

  psramMode: octal #2MB PSRAM = quad mode, 8MB or 16MB = octal

  # Phases of the Voice Assistant
  # The voice assistant is ready to be triggered by a wake word
  voice_assist_idle_phase_id: '1'
  # The voice assistant is waiting for a voice command (after being triggered by the wake word)
  voice_assist_waiting_for_command_phase_id: '2'
  # The voice assistant is listening for a voice command
  voice_assist_listening_for_command_phase_id: '3'
  # The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '4'
  # The voice assistant is replying to the command
  voice_assist_replying_phase_id: '5'
  # The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  # The voice assistant encountered an error
  voice_assist_error_phase_id: '11'
  # # MUTED: The voice assistant is muted and will not reply to a wake-word
  # voice_assist_muted_phase_id: '12'
  # Change this to true in case you have a hidden SSID at home.
  hidden_ssid: "false"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  min_version: 2025.5.0
  on_boot:
    priority: 375
    then:
      # Run the script to refresh the LED status
      - script.execute: control_leds
      - delay: 1s
      # If after 10 minutes, the device is still initializing (It did not yet connect to Home Assistant), turn off the init_in_progress variable and run the script to refresh the LED status
      - delay: 10min
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: control_leds

esp32:
  board: esp32-s3-devkitc-1
  cpu_frequency: 240MHz
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      # Moves instructions and read only data from flash into PSRAM on boot.
      # Both enabled allows instructions to execute while a flash operation is in progress without needing to be placed in IRAM.
      # Considerably speeds up mWW at the cost of using more PSRAM.
      CONFIG_SPIRAM_RODATA: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

wifi:
  id: wifi_id
  fast_connect: ${hidden_ssid}
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  on_connect:
    - script.execute: control_leds
  on_disconnect:
    - script.execute: control_leds

network:
  enable_ipv6: true

logger:
  level: DEBUG
  logs:
    sensor: WARN  # avoids logging debug sensor updates

api:
  encryption:
    key: ${api_key}
  id: api_id
  on_client_connected:
    - script.execute: control_leds
  on_client_disconnected:
    - script.execute: control_leds

ota:
  - platform: esphome
    id: ota_esphome
    password: ${ota_password}

psram:
  mode: ${psramMode}
  speed: 80MHz

time:
  - platform: homeassistant
    id: ha_time
    timezone: ${timezone}
interval:
  - interval: 60sec
    then:
      - if:
          condition:
            lambda: return (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state));
          then:
            - lambda: id(min_brightness) = ${min_brightness_day};
            - lambda: id(max_brightness) = ${max_brightness_day};
          else:
            - lambda: id(min_brightness) = ${min_brightness_night};
            - lambda: id(max_brightness) = ${max_brightness_night};

globals:
  # Global variable tracking if the volume was recently changed. Used to draw LED animations with specific brightness
  - id: volume_changed
    type: bool
    restore_value: no
    initial_value: 'false'

  # Global variable storing the min level of brightness. Used to draw LED animations with specific brightness
  - id: min_brightness
    type: double
    restore_value: no
    initial_value: ${min_brightness_night}

  # Global variable storing the max level of brightness. Used to draw LED animations with specific brightness
  - id: max_brightness
    type: double
    restore_value: no
    initial_value: ${max_brightness_night}

  # Global initialization variable. Initialized to true and set to false once everything is connected. Only used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'

  # Global variable tracking the phase of the voice assistant (defined above). Initialized to not_ready
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}

  # Global variable storing the first active timer
  - id: first_active_timer
    type: voice_assistant::Timer
    restore_value: false

  # Global variable storing if a timer is active
  - id: is_timer_active
    type: bool
    restore_value: false

switch:
  # This is the mute switch that mute mic and set volume to 0%. It is exposed to Home Assistant.
  - platform: template
    id: mute_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:volume-mute"
    name: Mute
    entity_category: config
    optimistic: True
    turn_on_action:
      # - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(mute_switch_on_sound);
      - delay: 500ms
      - microphone.mute:        
      - media_player.volume_set: 0%
    turn_off_action:
      # - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - media_player.volume_set: 50%
      - microphone.unmute:
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(mute_switch_off_sound);
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds

  # This is the microphone mute switch. It is exposed to Home Assistant.
  - platform: template
    id: mic_mute_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:microphone-off"
    name: "Mute microphone"
    entity_category: config
    optimistic: True
    turn_on_action:
      - microphone.mute:
    turn_off_action:
      - if:
          condition:
            switch.is_on: mute_switch
          then:
            - switch.turn_off: mute_switch
          else:
            - microphone.unmute:
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds

  # Wake Word Sound Switch.
  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  # Internal switch to track when a timer is ringing on the device.
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Disable stop wake word
      - micro_wake_word.disable_model: stop
      - script.execute: disable_repeat
      # Stop any current annoucement (ie: stop the timer ring mid playback)
      - if:
          condition:
            media_player.is_announcing:
          then:
            media_player.stop:
              announcement: true
      # Set back ducking ratio to zero
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s
      # Refresh the LED ring
      - script.execute: control_leds
    on_turn_on:
      # Duck audio
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
      # Enable stop wake word
      - micro_wake_word.enable_model: stop
      # Ring timer
      - script.execute: ring_timer
      # Refresh LED
      - script.execute: control_leds
      # If 15 minutes have passed and the timer is still ringing, stop it.
      - delay: 15min
      - switch.turn_off: timer_ringing

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: ws2812
    pin: ${led_bar_pin}
    num_leds: 8
    name: "Status LED Bar"
    id: led_bar
    icon: mdi:led-on
    default_transition_length: 0s
  - platform: partition
    id: start_led
    segments:
      - id: led_bar
        from: 0
        to: 0
    default_transition_length: 100ms
  - platform: partition
    id: middle_led
    segments:
      - id: led_bar
        from: 1
        to: 6
        reversed: false #set false if you want to chage direction of the led bar on change volume
    default_transition_length: 100ms
    effects:
      - pulse:
          name: "Slow Pulse Night"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: ${min_brightness_night_percent}
          max_brightness: ${max_brightness_night_percent}
      - pulse:
          name: "Fast Pulse Night"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: ${min_brightness_night_percent}
          max_brightness: ${max_brightness_night_percent}
      - pulse:
          name: "Slow Pulse Day"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: ${min_brightness_day_percent}
          max_brightness: ${max_brightness_day_percent}
      - pulse:
          name: "Fast Pulse Day"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: ${min_brightness_day_percent}
          max_brightness: ${max_brightness_day_percent}
      - addressable_lambda:
          name: "Show Volume"
          update_interval: 50ms
          lambda: |-
            int int_volume = int(id(external_media_player).volume * 100 * it.size());
            int full_leds = int_volume / 100;
            int last_brightness = int_volume % 100;
            int i = 0;
            for(; i < full_leds; i++) {
              it[i] = Color::WHITE;
            }
            if(i < 4) {
              it[i++] = Color(64, 64, 64).fade_to_white(last_brightness*256/100);
            }
            for(; i < it.size(); i++) {
              it[i] = Color(64, 64, 64);
            }
  - platform: partition
    id: end_led
    segments:
      - id: led_bar
        from: 7
        to: 7
    default_transition_length: 100ms

script:
  # Master script controlling the LEDs, based on different conditions : initialization in progress, wifi and api connected and voice assistant phase.
  # For the sake of simplicity and re-usability, the script calls child scripts defined below.
  # This script will be called every time one of these conditions is changing.
  - id: control_leds
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(is_timer_active)){
            id(fetch_first_active_timer).execute();
          }
          if (id(init_in_progress)) {
            id(control_leds_init_state).execute();
          } else if (!id(wifi_id).is_connected() || !id(api_id).is_connected()){
            id(control_leds_no_ha_connection_state).execute();
          } else if (id(volume_changed)) {
            id(show_volume).execute();
          } else if (id(timer_ringing).state) {
            id(control_leds_timer_ringing).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_waiting_for_command_phase_id}) {
            id(control_leds_voice_assistant_waiting_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_listening_for_command_phase_id}) {
            id(control_leds_voice_assistant_listening_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id}) {
            id(control_leds_voice_assistant_thinking_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_replying_phase_id}) {
            id(control_leds_voice_assistant_replying_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_error_phase_id}) {
            id(control_leds_voice_assistant_error_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_not_ready_phase_id}) {
            id(control_leds_voice_assistant_not_ready_phase).execute();
          } else if (id(is_timer_active)) {
            id(control_leds_timer_ticking).execute();
          } else if (id(mute_switch).state) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_idle_phase_id}) {
            id(control_leds_voice_assistant_idle_phase).execute();
          }

  # # Warm White color. Dont want to lost.
  #         brightness: 66%
  #         red: 100%
  #         green: 89%
  #         blue: 71%
  
  # Script executed when the volume is increased/decreased from the игеещты
  - id: show_volume
    mode: restart
    then:
      - light.turn_on:
          id: middle_led
          effect: "Show Volume"          
          brightness: !lambda 'return id(max_brightness);'
      - delay: 1s
      - lambda: id(volume_changed) = false;
      - script.execute: control_leds

  # Script executed during initialisation: In this example: Turn the LED in green with a fast pulse 🟢
  - id: control_leds_init_state
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 0%
          green: 100%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Fast Pulse Day";
            } else {
              return "Fast Pulse Night";
            }

  # Script executed when the device has no connection to Home Assistant
  # Turn the LED in yellow, solid (slow pulse) 🟡 (This will be visible during HA updates for example)
  - id: control_leds_no_ha_connection_state
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 100%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Slow Pulse Day";
            } else {
              return "Slow Pulse Night";
            }

  # Script executed when the voice assistant is idle (waiting for a wake word)
  # Nothing (Turn off the LED)
  - id: control_leds_voice_assistant_idle_phase
    then:
      - light.turn_off:
          id: middle_led

  # Script executed when the voice assistant is waiting for a command (After the wake word)
  # Turn the LED in blue with a slow pulse 🔵
  - id: control_leds_voice_assistant_waiting_for_command_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Slow Pulse Day";
            } else {
              return "Slow Pulse Night";
            }

  # Script executed when the voice assistant is listening to a command
  # Turn the LED in blue with a slow pulse 🔵
  - id: control_leds_voice_assistant_listening_for_command_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Slow Pulse Day";
            } else {
              return "Slow Pulse Night";
            }

  # Script executed when the voice assistant is thinking to a command
  # Turn the LED in blue, solid (no pulse) 🔵
  - id: control_leds_voice_assistant_thinking_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: "none"

  # Script executed when the voice assistant is thinking to a command
  # Turn the LED in blue, solid (no pulse) 🔵
  - id: control_leds_voice_assistant_replying_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 0%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: "none"

  # Script executed when the voice assistant is in error
  # Turn the LED in red with a fast pulse 🔴
  - id: control_leds_voice_assistant_error_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Fast Pulse Day";
            } else {
              return "Fast Pulse Night";
            }

  # Script executed when the voice assistant is muted or silent
  # Turn the LED in red, solid (no pulse) 🔴
  - id: control_leds_muted_or_silent
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 0%
          brightness: !lambda 'return id(max_brightness);'
          effect: "none"

  # Script executed when the voice assistant is not ready
  # Turn the LED in yellow, solid (slow pulse) 🟡 (This will be visible during HA updates for example)
  - id: control_leds_voice_assistant_not_ready_phase
    then:
      - light.turn_on:
          id: middle_led
          blue: 0%
          red: 100%
          green: 100%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Slow Pulse Day";
            } else {
              return "Slow Pulse Night";
            }

  # # Script executed when the timer is ringing, to control the LEDs
  # Turn the LED in white with a fast pulse ⚪
  - id: control_leds_timer_ringing
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 100%
          green: 100%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Fast Pulse Day";
            } else {
              return "Fast Pulse Night";
            }

  # Script executed when the timer is ticking, to control the LEDs
  # Turn the LED in white with a slow pulse ⚪
  - id: control_leds_timer_ticking
    then:
      - light.turn_on:
          id: middle_led
          blue: 100%
          red: 100%
          green: 100%
          brightness: !lambda 'return id(max_brightness);'
          effect: !lambda |-
            if (id(ha_time).now().hour > int(id(day_switch_time).state) && id(ha_time).now().hour < int(id(night_switch_time).state)) {
              return "Slow Pulse Day";
            } else {
              return "Slow Pulse Night";
            }

  # Script executed when the timer is ringing, to playback sounds.
  - id: ring_timer
    then:
      - script.execute: enable_repeat_one
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(timer_finished_sound);

  # Script executed when the timer is ringing, to repeat the timer finished sound.
  - id: enable_repeat_one
    then:
      # Turn on the repeat mode and pause for 500 ms between playlist items/repeats
      - lambda: |-
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 500);

  # Script execute when the timer is done ringing, to disable repeat mode.
  - id: disable_repeat
    then:
      # Turn off the repeat mode and pause for 0 ms between playlist items/repeats
      - lambda: |-
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
              .set_announcement(true)
              .perform();
            id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);

  # Script executed when we want to play sounds on the device.
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(external_media_player)
              ->play_file(sound_file, true, false);
          }

  # Script used to fetch the first active timer (Stored in global first_active_timer)
  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(first_active_timer) = output_timer;

  # Script used to check if a timer is active (Stored in global is_timer_active)
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(is_timer_active) = output;

  # Script used activate the stop word if the TTS step is long.
  # Why is this wrapped on a script?
  #   Becasue we want to stop the sequence if the TTS step is faster than that.
  #   This allows us to prevent having the deactivation of the stop word before its own activation.
  - id: activate_stop_word_once
    then:
      - delay: 1s
      # Enable stop wake word
      - if:
          condition:
            switch.is_off: timer_ringing
          then:
            - micro_wake_word.enable_model: stop
            - wait_until:
                not:
                  media_player.is_announcing:
            - if:
                condition:
                  switch.is_off: timer_ringing
                then:
                  - micro_wake_word.disable_model: stop

i2s_audio:
  - id: i2s_output
    i2s_lrclk_pin:
      number: $i2s_lrclk_pin_out
    i2s_bclk_pin:
      number: $i2s_bclk_pin_out

  - id: i2s_input
    i2s_lrclk_pin:
      number: $i2s_lrclk_pin_in
    i2s_bclk_pin:
      number: $i2s_bclk_pin_in

microphone:
  - platform: i2s_audio
    id: i2s_mics
    i2s_din_pin: $i2s_din_pin_mic
    adc_type: external
    pdm: false
    sample_rate: 16000
    bits_per_sample: 32bit
    i2s_audio_id: i2s_input
    channel: left

speaker:
  # Hardware speaker output
  - platform: i2s_audio
    id: i2s_audio_speaker
    sample_rate: 48000
    i2s_dout_pin: $i2s_dout_pin_spk
    bits_per_sample: 32bit
    i2s_audio_id: i2s_output
    dac_type: external
    channel: mono
    timeout: never
    buffer_duration: 100ms

  # Virtual speakers to combine the announcement and media streams together into one output
  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 1
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never

  # Vritual speakers to resample each pipelines' audio, if necessary, as the mixer speaker requires the same sample rate
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: False
    volume_increment: 0.05
    volume_min: 0.4
    volume_max: 0.85
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 1  # Stereo audio is unnecessary for announcements
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 1
      sample_rate: 48000
    on_mute:
      - script.execute: control_leds
    on_unmute:
      - script.execute: control_leds
    on_volume:
      - lambda: id(volume_changed) = true;
      - script.execute: control_leds
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
    on_state:
      - if:
          condition:
            and:
              - switch.is_off: timer_ringing
              - not:
                  voice_assistant.is_running:
              - not:
                  media_player.is_announcing:
          then:
            - mixer_speaker.apply_ducking:
                id: media_mixing_input
                decibel_reduction: 0
                duration: 1.0s
    files:
      - id: mute_switch_on_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_on.flac
      - id: mute_switch_off_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_off.flac
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac
      - id: error_cloud_expired
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/error_cloud_expired.mp3

micro_wake_word:
  id: mww
  microphone:
    microphone: i2s_mics
    gain_factor: 4
  stop_after_detection: false
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
      id: okay_nabu
    - model: hey_jarvis
      id: hey_jarvis
    - model: hey_mycroft
      id: hey_mycroft
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop/stop.json
      id: stop
      internal: true
  vad:
  on_wake_word_detected:
    # If the wake word is detected when the device is muted (Possible with the software mute switch): Do nothing
    - if:
        condition:
          switch.is_off: mic_mute_switch #master_mute_switch
        then:
          # If a timer is ringing: Stop it, do not start the voice assistant (We can stop timer from voice!)
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              # Stop voice assistant if running
              else:
                - if:
                    condition:
                      voice_assistant.is_running:
                    then:
                      voice_assistant.stop:
                    # Stop any other media player announcement
                    else:
                      - if:
                          condition:
                            media_player.is_announcing:
                          then:
                            - media_player.stop:
                                announcement: true
                          # Start the voice assistant and play the wake sound, if enabled
                          else:
                            - if:
                                condition:
                                  switch.is_on: wake_sound
                                then:
                                  - script.execute:
                                      id: play_sound
                                      priority: true
                                      sound_file: !lambda return id(wake_word_triggered_sound);
                                  - delay: 300ms
                            - voice_assistant.start:
                                wake_word: !lambda return wake_word;

select:
  - platform: template
    name: "Wake word sensitivity"
    optimistic: true
    initial_option: Moderately sensitive
    restore_value: true
    entity_category: config
    options:
      - Slightly sensitive
      - Moderately sensitive
      - Very sensitive
    on_value:
      # Sets specific wake word probabilities computed for each particular model
      # Note probability cutoffs are set as a quantized uint8 value, each comment has the corresponding floating point cutoff
      # False Accepts per Hour values are tested against all units and channels from the Dinner Party Corpus.
      # These cutoffs apply only to the specific models included in the firmware: okay_nabu@20241226.3, hey_jarvis@v2, hey_mycroft@v2
      lambda: |-
        if (x == "Slightly sensitive") {
          id(okay_nabu).set_probability_cutoff(217);    // 0.85 -> 0.000 FAPH on DipCo (Manifest's default)
          id(hey_jarvis).set_probability_cutoff(247);   // 0.97 -> 0.563 FAPH on DipCo (Manifest's default)
          id(hey_mycroft).set_probability_cutoff(253);  // 0.99 -> 0.567 FAPH on DipCo
        } else if (x == "Moderately sensitive") {
          id(okay_nabu).set_probability_cutoff(176);    // 0.69 -> 0.376 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(235);   // 0.92 -> 0.939 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(242);  // 0.95 -> 1.502 FAPH on DipCo (Manifest's default)
        } else if (x == "Very sensitive") {
          id(okay_nabu).set_probability_cutoff(143);    // 0.56 -> 0.751 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(212);   // 0.83 -> 1.502 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(237);  // 0.93 -> 1.878 FAPH on DipCo
        }

voice_assistant:
  id: va
  microphone:
    microphone: i2s_mics
    channels: 0
  media_player: external_media_player
  micro_wake_word: mww
  use_wake_word: false
  noise_suppression_level: 0
  auto_gain: 0 dbfs
  volume_multiplier: 1
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - micro_wake_word.start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
  on_client_disconnected:
    - voice_assistant.stop:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: control_leds
  on_error:
    # Only set the error phase if the error code is different than duplicate_wake_up_detected or stt-no-text-recognized
    # These two are ignored for a better user experience
    - if:
        condition:
          and:
            - lambda: return !id(init_in_progress);
            - lambda: return code != "duplicate_wake_up_detected";
            - lambda: return code != "stt-no-text-recognized";
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: control_leds
    # If the error code is cloud-auth-failed, serve a local audio file guiding the user.
    - if:
        condition:
          - lambda: return code == "cloud-auth-failed";
        then:
          - script.execute:
              id: play_sound
              priority: true
              sound_file: !lambda return id(error_cloud_expired);
  # When the voice assistant starts: Play a wake up sound, duck audio.
  on_start:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20  # Number of dB quieter; higher implies more quiet, 0 implies full volume
        duration: 0.0s         # The duration of the transition (default is no transition)
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_waiting_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_leds
  on_tts_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_leds
    # Start a script that would potentially enable the stop word if the response is longer than a second
    - script.execute: activate_stop_word_once
  # When the voice assistant ends ...
  on_end:
    - wait_until:
        not:
          voice_assistant.is_running:
    # Stop ducking audio.
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
    # If the end happened because of an error, let the error phase on for a second
    - if:
        condition:
          lambda: return id(voice_assistant_phase) == ${voice_assist_error_phase_id};
        then:
          - delay: 1s
    # Reset the voice assistant phase id and reset the LED animations.
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
  on_timer_finished:
    - switch.turn_on: timer_ringing
  on_timer_started:
    - script.execute: control_leds
  on_timer_cancelled:
    - script.execute: control_leds
  on_timer_updated:
    - script.execute: control_leds
  on_timer_tick:
    - script.execute: control_leds

button:
  - platform: restart
    id: restart_button
    name: "Restart"
    entity_category: config
    disabled_by_default: true
    icon: "mdi:restart"

number:
  - platform: template
    id: night_switch_time
    name: "Night switch time"
    optimistic: true
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 22
    restore_value: true
  - platform: template
    id: day_switch_time
    name: "Day switch time"
    optimistic: true
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 7
    restore_value: true